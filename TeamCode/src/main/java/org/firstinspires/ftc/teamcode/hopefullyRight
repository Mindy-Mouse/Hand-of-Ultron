package org.firstinspires.ftc.teamcode.TeleOp;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.CRServo;

@TeleOp(name="hopefullyRight", group="Iterative Opmode")
public class hopefullyRight extends OpMode {
    ElapsedTime runtime = new ElapsedTime();

    DcMotor LeftFrontWheels = null;
    DcMotor LeftBackWheels = null;
    DcMotor RightFrontWheels = null;
    DcMotor RightBackWheels = null;
    
    DcMotor inTilt = null;
    DcMotor paddles = null;
    DcMotor outLift = null;
    
    CRServo inLift = null;

    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");

        LeftFrontWheels = hardwareMap.get(DcMotor.class,"LFW");
        RightFrontWheels = hardwareMap.get(DcMotor.class,"RFW");
        RightBackWheels = hardwareMap.get(DcMotor.class,"RBW");
        LeftBackWheels = hardwareMap.get(DcMotor.class,"LBW");
        
        inTilt = hardwareMap.get(DcMotor.class,"inTilt");
        paddles = hardwareMap.get(DcMotor.class,"paddles");
        outLift = hardwareMap.get(DcMotor.class,"outLift");
        inLift = hardwareMap.get(CRServo.class,"inLift");

        LeftFrontWheels.setDirection(DcMotor.Direction.FORWARD);
        LeftBackWheels.setDirection(DcMotor.Direction.FORWARD);
        RightFrontWheels.setDirection(DcMotor.Direction.REVERSE);
        RightBackWheels.setDirection(DcMotor.Direction.REVERSE);
        
        inTilt.setDirection(DcMotor.Direction.REVERSE);
        paddles.setDirection(DcMotor.Direction.REVERSE);
        outLift.setDirection(DcMotor.Direction.FORWARD);
        
        telemetry.addData("Status", "Initialized");

    }

    @Override
    public void init_loop() {
    }

    @Override
    public void start() {
        runtime.reset();

    }

    @Override
    public void loop() {

        double leftPower;
        double rightPower;
        double liftPower = 0.5;

        leftPower  = gamepad1.left_stick_y;
        rightPower = gamepad1.right_stick_y;

        if(leftPower != 0 || rightPower != 0) {
            LeftFrontWheels.setPower(leftPower);
            LeftBackWheels.setPower(leftPower);
            RightFrontWheels.setPower(rightPower);
            RightBackWheels.setPower(rightPower);
        }
        /*
        out lift up and down - 2 :)
        outtake pivot - 1 2 maybe
        intake in and out - 2 :)
        paddles - 1 :)
        intake tilt up and down - 2 :)
        */
        //moving outtake box up and down
       if(gamepad1.a){
            outLift.setPower(liftPower);
       }
       if(gamepad1.b){
            outLift.setPower(-liftPower);
       }
       
       //tilting intake box up and down
       if(gamepad1.dpad_down){
            while(runtime < 2){
                inTilt.setPower(liftPower/3);
                inLift.setPower(liftPower);
               // sleep(100);
            }
       }
       if(gamepad1.dpad_up){
            inTilt.setPower(-liftPower);
       }
       
       //spin paddles
       if(gamepad1.left_bumper){
            paddles.setPower(liftPower);
       }
       
       //reel in intake box
       if(gamepad1.dpad_right){
            inLift.setPower(-liftPower/1.5);
       }

        else {
            RightFrontWheels.setPower(0);
            RightBackWheels.setPower(0);
            LeftBackWheels.setPower(0);
            LeftFrontWheels.setPower(0);
            inTilt.setPower(0);
            paddles.setPower(0);
            outLift.setPower(0);
            inLift.setPower(0);
        }

        telemetry.addData("Status", "Run Time: " + runtime.toString());
        telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);

    }

    @Override
    public void stop() {
    }

}
